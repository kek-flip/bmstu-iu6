unit Figures;

interface

Uses graphics,ExtCtrls, System.Types;


type figure = class(TObject)
  procedure move(t : real); virtual; abstract;
  procedure draw; virtual; abstract;
  procedure clear; virtual; abstract;
end;


type triangle = class(figure)
  A, B, C : TPoint;
  side, ang : real;
  image : TImage;
public
  constructor create(ax1, ay1, ax2, ay2 : integer; aimage : TImage);
  procedure move(t : real); override;
  procedure draw; override;
  procedure clear; override;
end;


type pyramid = class(figure)
  S, A, B, C : TPoint;
  r, angA, angB, angC : real;
  image : TImage;
  flag : Integer;   //jopa

public
  constructor create(ax1, ay1, ax2, ay2 : integer; aimage : TImage);
  procedure move(t : real); override;
  procedure draw; override;
  procedure clear; override;
end;


type prism = class(figure)

end;

implementation
  constructor triangle.create;
  begin
    side := (ay2 - ay1) * 2 / sqrt(3);

    A.X := ax1;
    A.Y := ay1;

    B.X := ax2 - round(side / 2);
    B.Y := ay2;

    C.X := ax2 + round(side / 2);
    C.Y := ay2;

    ang := 0;

    image := aimage;
  end;


  procedure triangle.draw;
  begin
    image.Canvas.Pen.Color := clBlack;
    image.Canvas.Polygon([A, B, C]);

    if (cos(ang) > 0) then
    begin
      image.Canvas.Brush.Color := clRed;
      image.Canvas.FloodFill(A.X, B.Y - 1, clBlack, fsBorder);
    end
    else if (cos(ang) < 0) then
    begin
      image.Canvas.Brush.Color := clGreen;
      image.Canvas.FloodFill(A.X, B.Y - 1, clBlack, fsBorder);
    end;
  end;


  procedure triangle.clear;
  begin
    image.Canvas.Brush.Color := clWhite;
    image.Canvas.FloodFill(A.X, B.Y - 1, clBlack, fsBorder);

    image.Canvas.Pen.Color := clWhite;
    image.Canvas.Polygon([A, B, C]);
  end;


  procedure triangle.move;
  var dx : integer;
  begin
    clear;

    ang := ang + 0.2 * t;
    dx := round(side / 2 * cos(ang));
    B.X := A.X + dx;
    C.X := A.X - dx;

    draw;
  end;


  constructor pyramid.create(ax1: Integer; ay1: Integer; ax2: Integer; ay2: Integer; aimage: TImage);
  begin
    S.X := ax1;
    S.Y := ay1;

    C.X := ax2;
    C.Y := ay2;

    B.X := ax2 + round(sqrt(3 / 2) * (ay2 - ay1) / 2);
    B.Y := ay2;

    A.X := ax2 - round(sqrt(3 / 2) * (ay2 - ay1) / 2);
    A.Y := ay2;

    angA := (Pi * 7) / 6;
    angB := (Pi * 11) / 6;
    angC := Pi / 2;

    r := sqrt(3 / 2) * (ay2 - ay1) * sqrt(6) / 3;

    image := aimage;
  end;


  procedure pyramid.draw;
  begin
    image.Canvas.Pen.Color := clBlack;

    //jopa_begin
    if (flag = 0) then
    begin
    image.Canvas.Polygon([S, A, B]);
    image.Canvas.Polygon([S, C, A]);
    image.Canvas.Polygon([S, B, C]);
    end;

    if (flag = 1) then
    begin
    image.Canvas.Polygon([S, C, A]);
    image.Canvas.Polygon([S, B, C]);
    image.Canvas.Polygon([S, A, B]);
    end;

    if (flag = 2) then
    begin
    image.Canvas.Polygon([S, B, C]);
    image.Canvas.Polygon([S, A, B]);
    image.Canvas.Polygon([S, C, A]);
    end;

    //jopa_end
    {image.Canvas.MoveTo(S.X, S.Y);

    image.Canvas.LineTo(A.X, A.Y);
    image.Canvas.LineTo(B.X, B.Y);
    image.Canvas.LineTo(S.X, S.Y);

    image.Canvas.LineTo(C.X, C.Y);
    image.Canvas.LineTo(A.X, A.Y);
    image.Canvas.LineTo(C.X, C.Y);
    image.Canvas.LineTo(B.X, B.Y);}


  end;


  procedure pyramid.clear;
  begin
    image.Canvas.Pen.Color := clWhite;

    image.Canvas.MoveTo(S.X, S.Y);

    image.Canvas.LineTo(A.X, A.Y);
    image.Canvas.LineTo(B.X, B.Y);
    image.Canvas.LineTo(S.X, S.Y);

    image.Canvas.LineTo(C.X, C.Y);
    image.Canvas.LineTo(A.X, A.Y);
    image.Canvas.LineTo(C.X, C.Y);
    image.Canvas.LineTo(B.X, B.Y);
  end;

  procedure pyramid.move(t: Real);
  var dxA, dxB, dxC : integer;
  begin
    clear;

    angA := angA + 0.2 * t;
    angB := angB + 0.2 * t;
    angC := angC + 0.2 * t;

    dxA := round(cos(angA) * S.X);
    dxB := round(cos(angB) * S.X);
    dxC := round(cos(angC) * S.X);

    A.X := S.X + dxA;
    B.X := S.X + dxB;
    C.X := S.X + dxC;

    if(B.X > C.X) then flag := 0;   //jopa
    if(A.X > B.X) then flag := 1;   //jopa
    if(C.X > A.X) then flag := 2;   //jopa

    draw;
  end;
end.
