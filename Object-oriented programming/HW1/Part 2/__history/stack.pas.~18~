unit stack;

interface

type
  elP = ^el;
  el = record
    valI : integer;
    valC : char;
    t : char;
    p : elP;
end;

type TStack = class
private
  head : elP;
public
  constructor create(c : char); overload;
  constructor create(i : integer); overload;
  procedure push(c : char); overload;
  procedure push(i : integer); overload;
  procedure pop;
  procedure print;
  destructor delete; virtual;
end;

type TSortStack = class(TStack)
private
  procedure swapVal(el1, el2 : elP);
  function nextCharEl (goFrom : elP) : elP;
  function nextIntegerEl (goFrom : elP): elP;
public
  constructor create(c : char); overload;
  constructor create(i : integer); overload;
  procedure sort;
  destructor delete; virtual;
end;

implementation

constructor TStack.create(c : char);
begin
  new(head);
  head^.valC := c;
  head^.t := 'C';
  head^.p := nil;
end;

constructor TStack.create(i : integer);
begin
  new(head);
  head^.valI := i;
  head^.t := 'I';
  head^.p := nil;
end;

procedure TStack.push(c : char);
var buf : elP;
begin
  new(buf);
  buf^.valC := c;
  buf^.t := 'C';
  buf^.p := head;
  head := buf;
end;

procedure TStack.push(i : integer);
var buf : elP;
begin
  new(buf);
  buf^.valI := i;
  buf^.t := 'I';
  buf^.p := head;
  head := buf;
end;

procedure TStack.pop;
var buf : elP;
begin
  buf := head^.p;
  dispose(head);
  head := buf;
end;

procedure TStack.print;
var i : elP;
begin
  i := head;
  while (i <> nil) do
  begin
    if (i^.t = 'C') then
      write(i^.valC, ' ');

    if (i^.t = 'I') then
      write(i^.valI, ' ');

    i := i^.p;
  end;
  writeln;
end;

destructor TStack.delete;
begin
  while (head <> nil) do
  begin
    pop;
  end;
end;

//====================================================================

constructor TSortStack.create(c: Char);
begin
  inherited create(c);
end;


constructor TSortStack.create(i: integer);
begin
  inherited create(i);
end;

procedure TSortStack.swapVal(el1: elP; el2: elP);
var bufC : char; bufI : integer;
begin
  if (el1^.t = 'C') then
  begin
    bufC := el1^.valC;
    el1^.valC := el2^.valC;
    el2^.valC := bufC;
  end
  else
  begin
    bufI := el1^.valI;
    el1^.valI := el2^.valI;
    el2^.valI := bufI;
  end;
end;

function TSortStack.nextCharEl(goFrom: elP): elP;
var i : elP;
begin
  i := goFrom^.p;
  while (i <> nil) and (i^.t <> 'C')  do
  begin
    i := i^.p;
  end;
  nextCharEl := i;
end;

function TSortStack.nextIntegerEl(goFrom: elP): elP;
var i : elP;
begin
  i := goFrom^.p;
  while (i <> nil) and (i^.t <> 'I')  do
  begin
    i := i^.p;
  end;
  nextIntegerEl := i;
end;

procedure TSortStack.sort;
var changed : boolean; i, next : elP;
begin
  changed := true;
  i := head;
  while (changed) do
  begin
    changed := false;
    while (i <> nil) do
    begin
      if (i^.t = 'C') then
      begin
        next := nextCharEl(i);
        if (next <> nil) and (i^.valC > next^.valC) then
        begin
          swapVal(i, next);
          changed := true;
        end;
      end
      else
      begin
        next := nextIntegerEl(i);
        if (next <> nil) and (i^.valI > next^.valI) then
        begin
          swapVal(i, next);
          changed := true;
        end;
      end;
      i := i^.p;
      print;
    end;
    i := head;
  end;
end;

destructor TSortStack.delete;
begin
  inherited delete;
end;

end.
